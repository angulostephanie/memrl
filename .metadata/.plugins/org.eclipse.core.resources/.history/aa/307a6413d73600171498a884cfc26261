package tmaze;


import java.util.HashMap;

import java.util.Map;


public abstract class MDPSolver {
	protected Domain domain;
	protected Model model;
	protected HashableStateFactory hashingFactory;
	protected double gamma;
	
	
	/**
	 * The list of actions this solver can use. May include non-domain specified actions like {@link burlap.behavior.singleagent.options.Option}s.
	 */
	//protected List <ActionType> actionTypes;

	
	/**
	 * The debug code use for calls to {@link burlap.debugtools.DPrint}
	 */
	protected int debugCode;
	protected boolean usingOptionModel = false;

	
	public abstract void resetSolver();
	

	public void solverInit(Domain domain, double gamma, HashableStateFactory hashingFactory){

		this.gamma = gamma;
		this.hashingFactory = hashingFactory;
		this.setDomain(domain);
		
	}
	
	
//	@Override
//	public void addActionType(ActionType a){
//		//make sure it doesn't already exist in the list
//		if(!actionTypes.contains(a)){
//			actionTypes.add(a);
//		}
//		
//	}

	public void setModel(Model model) {
		this.model = model;
	}

	public Model getModel() {
		return this.model;
	}

//	public void setActionTypes(List<ActionType> actionTypes){
//		this.actionTypes = actionTypes;
//	}


//	public List<ActionType> getActionTypes(){
//		return new ArrayList<ActionType>(this.actionTypes);
//	}

	
	public void setHashingFactory(HashableStateFactory hashingFactory) {
		this.hashingFactory = hashingFactory;
	}

	public HashableStateFactory getHashingFactory(){
		return this.hashingFactory;
	}
	
	public double getGamma(){
		return this.gamma;
	}
	
	public void setGamma(double gamma){
		this.gamma = gamma;
	}

	public void setDebugCode(int code){
		this.debugCode = code;
	}
	

	public int getDebugCode(){
		return debugCode;
	}
	

	public void toggleDebugPrinting(boolean toggle){
		Map<Integer, Boolean> debugCodes = new HashMap<Integer, Boolean>();
		debugCodes.put(debugCode, toggle);
		//DPrint.toggleCode(debugCode, toggle);
	}


	public void setDomain(Domain domain) {
		this.domain = domain;
		if(this.domain != null) {

			this.model = domain.getModel();

//			if(this.actionTypes != null) {
//				this.actionTypes.clear();
//			}
//			else{
//				this.actionTypes = new ArrayList<ActionType>(domain.getActionTypes().size());
//			}
//
//			List<ActionType> actionTypes = domain.getActionTypes();
//			this.actionTypes = new ArrayList<ActionType>(actionTypes.size());
//			for(ActionType a : actionTypes) {
//				this.actionTypes.add(a);
//			}
		}
	}

	public Domain getDomain() {
		return domain;
	}

	public HashableState stateHash(State s){
		return hashingFactory.hashState(s);
	}

//	protected List <Action> applicableActions(State s){
//
//		return ActionUtils.allApplicableActionsForTypes(this.actionTypes, s);
//		
//	}
}
