package tmaze;

import java.util.ArrayList;
import java.util.List;

import burlap.behavior.singleagent.Episode;
import burlap.mdp.core.action.Action;
import burlap.mdp.core.state.State;


public class Episode {

	public List<State> stateSequence = new ArrayList<State>();
	public List<Action> actionSequence = new ArrayList<Action>();
	public List<Double>	rewardSequence = new ArrayList<Double>();
	
	public Episode() {
		
	}
	
	public Episode(State initState) {
		this.addInitState(initState);
	}
	
	public void addInitState(State initState) {
		this.stateSequence.add(initState);
	}
	public void transition(Action usingAction, State nextState, double r) {
		stateSequence.add(nextState);
		actionSequence.add(usingAction);
		rewardSequence.add(r);
	}
	public void transition(EnvironmentOutcome eo) {
		//this.stateSequence.add(eo.op);
		//this.actionSequence.add(eo.a);
		//this.rewardSequence.add(eo.r);
	}
	public Action getAction(int time) {
		if(time == this.actionSequence.size()){
			throw new RuntimeException("Episode does not contain action at time step " + time + ". Note that an Episode " +
					"always has a final state at one time step larger than the last action time step " +
					"(the final state reached).");
		}
		if(time > this.actionSequence.size()){
			throw new RuntimeException("Episode has nothing recorded for time step "  + time);
		}
		return actionSequence.get(time);
	}
	
	public State getState(int time) {
		if(time >= this.stateSequence.size()){
			throw new RuntimeException("Episode has nothing recorded for time step "  + time);
		}
		return stateSequence.get(time);
	}
	
	
	public double reward(int time) {
		if(time == 0){
			throw new RuntimeException("Cannot return the reward received at time step 0; the first received reward occurs after the initial state at time step 1");
		}
		if(time > rewardSequence.size()){
			throw new RuntimeException("There are only " + this.rewardSequence.size() + " rewards recorded; cannot return the reward for time step " + time);
		}
		return rewardSequence.get(time-1);
	}
	
	public int numTimeSteps() {
		return stateSequence.size(); //initial state and terminal state 
	}
	
	public int maxTimeStep() {
		return this.stateSequence.size()-1;
	}
	public int numActions()	{ 
		return this.actionSequence.size();
	}
	
	public Episode copy(){
		Episode ep = new Episode();
		ep.stateSequence = new ArrayList<State>(this.stateSequence);
		ep.actionSequence = new ArrayList<Action>(this.actionSequence);
		ep.rewardSequence = new ArrayList<Double>(this.rewardSequence);
		return ep;
	}
}
